Util/ auth.go
1. GenerateTokens: ฟังก์ชั่นนี้จะสร้างและคืนค่า access_token และ refresh_token
2. GenerateAccessClaims: ฟังก์ชั่นนี้จะสร้างและคืนค่าเคลมและ access_token โดยจะสร้าง access token ที่มีอายุ 15 นาที
3. GenerateRefreshClaims: ฟังก์ชั่นนี้จะสร้างและคืนค่า refresh_token โดยจะสร้าง refresh token ที่มีอายุ 30 วัน
4. SecureAuth: ฟังก์ชั่นนี้จะคืนค่า middleware ซึ่งจะรักษาความปลอดภัยของเส้นทางเอกสารทั้งหมด มิเช่นนั้นจะทำการตรวจสอบ access_token ก่อน หาก token ถูกต้อง เราจะใช้ Locals เพื่อเก็บตัวแปรที่มีขอบเขตในคำขอ
5. GetAuthCookies: ฟังก์ชั่นนี้จะส่งคุกกี้สองตัวชนิด access_token และ refresh_token
ในสร้าง Utility Functions ทั้งหมดดังกล่าว คุณได้ทำการเรียบเรียงและอธิบายได้อย่างชัดเจนและเข้าใจง่าย นี่คือคำอธิบายของแต่ละฟังก์ชัน:
6. GenerateTokens: สร้างและคืนค่า access_token และ refresh_token ในรูปแบบของ struct ที่มีชุดข้อมูลที่กำหนด
7. GenerateAccessClaims: สร้างและคืนค่า claim และ access_token โดยกำหนดเวลาหมดอายุให้กับ access token เป็น 15 นาที
8. GenerateRefreshClaims: สร้างและคืนค่า refresh_token โดยกำหนดเวลาหมดอายุให้กับ refresh token เป็น 30 วัน
9. SecureAuth: คืนค่า middleware ที่จะใช้ในการรักษาความปลอดภัยของเส้นทางเอกสาร โดยการตรวจสอบความถูกต้องของ access_token ก่อน และจะใช้ Locals เพื่อเก็บตัวแปรที่มีขอบเขตในคำขอเมื่อ access_token ถูกต้อง
10. GetAuthCookies: ส่งคุกกี้สองตัวชนิด access_token และ refresh_token เพื่อให้เหมาะสมกับการใช้งาน

router/ user.go
1. แปลงข้อมูลที่รับเข้ามาเป็นโครงสร้างของผู้ใช้ (User model struct).
2. ตรวจสอบความถูกต้องของข้อมูลโดยเรียกใช้ฟังก์ชัน ValidateRegister จากไฟล์ util/validators.go.
3. ตรวจสอบว่าอีเมลและชื่อผู้ใช้ไม่ซ้ำกัน.
4. หากทุกอย่างถูกต้องจนถึงตอนนี้ ให้เข้ารหัสรหัสผ่านโดยใช้ไลบรารี bcrypt พร้อมกับเกลี่ยค่าเกลือแบบสุ่ม.
5. ลงทะเบียนผู้ใช้ในฐานข้อมูลของเราและสร้างโทเคนการเข้าถึงและการรีเฟรช.
6. ตั้งค่าโทเคนการเข้าถึงและการรีเฟรชเป็นคุกกี้พร้อมกับตรา httpOnly และ secure flag.
7. ส่งคืนโทเคน.